#include<stdio.h>
#include <stdlib.h>
struct Node
{
    int key;
    struct Node *left;
    struct Node *right;
    int height;
};
int max(int a,int b);
int height(struct Node *N)
{
    if(N==NULL)
        return 0;
    return N->height;
}
int max(int a,int b)
{
    return (a>b?a:b);
}
struct Node* newNode(int key)
{
    struct Node* node=(struct Node*)malloc(sizeof(struct Node));
    node->key=key;
    node->left=NULL;
    node->right=NULL;
    node->height=1;
    return(node);
}
struct Node *rightRotate(struct Node *y)
{
    struct Node *x=y->left;
    struct Node *T2=x->right;
    x->right=y;
    y->left=T2;
    y->height=max(height(y->left),height(y->right))+1;
    x->height=max(height(x->left),height(x->right))+1;
    return x;
}
struct Node *leftRotate(struct Node *x)
{
    struct Node *y=x->right;
    struct Node *T2=y->left;
    y->left=x;
    x->right=T2;
    x->height=max(height(x->left),height(x->right))+1;
    y->height=max(height(y->left),height(y->right))+1;
    return y;
}
int getbalance(struct Node *N)
{
    if(N==NULL)
    {
        return 0;
    }
    return height(N->left)-height(N->right);
}
struct Node* insert(struct Node* node,int key)
{
    if(node==NULL)
    {
        return (newNode(key));
    }
    if(key<node->key)
    {
        node->left=insert(node->left,key);
    }
    else if(key>node->key)
    {
        node->right=insert(node->right,key);
    }
    else
    {
        return node;
    }
    node->height=1+max(height(node->left),height(node->right));
    int balance=getbalance(node);
    if(balance>1 && key<node->left->key)
    {   
        printf("Performing right rotation at %d\n",node->key);
        return rightRotate(node);
    }
    if(balance<-1 && key>node->right->key)
    {   
        printf("Performing left rotation at %d\n",node->key);
        return leftRotate(node);
    }
    if(balance>1 && key>node->left->key)
    {   
        printf("Performing left right rotation at %d\n",node->key);
        node->left=leftRotate(node->left);
        return rightRotate(node);
    }
    if(balance<-1 && key<node->right->key)
    {   
        printf("Performing right left rotation at %d\n",node->key);
        node->right=rightRotate(node->right);
        return leftRotate(node);
    }
    return node;
}
void preorder(struct Node *root)
{
    if(root!=NULL)
    {
        printf("%d ",root->key);
        preorder(root->left);
        preorder(root->right);
    }
}
int main()
{
    struct Node *root=NULL;
    int n,a;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a);
        root=insert(root,a);
    }
    printf("Preorder: ");
    preorder(root);
}
